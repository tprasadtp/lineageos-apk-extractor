#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Extract LineageOS ZIP
"""

import argparse
import logging
import os
import shutil
import sys
import zipfile
from pathlib import Path

import coloredlogs

CLF_STYLE = coloredlogs.DEFAULT_FIELD_STYLES
CLF_STYLE.update(
    {
        "programname": {"color": "magenta"},
    }
)

coloredlogs.install(
    level=logging.DEBUG,
    fmt="%(asctime)s %(programname)15s %(levelname)8s  %(lineno)3d  %(message)s",
    field_styles=CLF_STYLE,
)


def extract_zip_contents(zip_file, destination):
    """
    Extract contents of Zip file
    Arg:
        zip_file : path to Zipfile,
        destination:  directory to extract to
    """
    logging.info("Extracting ZIP File")
    if os.path.isfile(zip_file):
        with zipfile.ZipFile(zip_file, "r") as zip_ref:
            zip_ref.extractall(destination)
    else:
        logging.error("%s not found.", zip_file)
        sys.exit("ZIP is not the filesystem.")


def purge(dir, pattern):
    """
    Delete files in specified dir by pattern
    Args:
        dir : directory to scan
        pattern : regex to match
    """
    for p in Path(dir).glob(pattern):
        logging.debug(f"Deleting - {p}")
        p.unlink()


def delete_old_files(dest_dir):
    logging.info("Deleting old files (if any)")
    dest_path = Path(dest_dir)
    shutil.rmtree(dest_path.joinpath("META-INF").absolute(), ignore_errors=True)
    shutil.rmtree(dest_path.joinpath("system").absolute(), ignore_errors=True)
    shutil.rmtree(dest_path.joinpath("system").absolute(), ignore_errors=True)
    purge(dir=dest_dir, pattern="system.*.*")
    purge(dir=dest_dir, pattern="*.img")
    purge(dir=dest_dir, pattern="*.bin")
    purge(dir=dest_dir, pattern="*.pb")
    purge(dir=dest_dir, pattern="*.txt")
    purge(dir=dest_dir, pattern="compatibility.zip")


def main():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        add_help=True,
    )
    parser.add_argument(
        "-d",
        "--dest-dir",
        default="build",
        required=True,
        type=str,
        help="Extract destination",
    )
    parser.add_argument(
        "-z", "--zip-file", required=True, type=str, help="Path to ZIP file"
    )
    args = parser.parse_args()

    try:
        # Extract Files
        logging.info("Extracting from ZIP File ....")
        delete_old_files(args.dest_dir)
        # Extract files
        extract_zip_contents(zip_file=args.zip_file, destination=args.dest_dir)
    except:
        logging.exception("Failed to extract files!!")
        sys.exit(1)

if __name__ == "__main__":
    main()
