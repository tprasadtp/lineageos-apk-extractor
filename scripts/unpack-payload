#!/usr/bin/env python3

import argparse
import hashlib
import logging
import os
import os.path
import shutil
import struct
import subprocess
import sys
import zipfile
from pathlib import Path

import metadata_pb2
import coloredlogs

CLF_STYLE = coloredlogs.DEFAULT_FIELD_STYLES
CLF_STYLE.update(
    {
        "programname": {"color": "magenta"},
    }
)

coloredlogs.install(
    level=logging.DEBUG,
    fmt="%(asctime)s %(programname)15s %(levelname)8s  %(lineno)3d  %(message)s",
    field_styles=CLF_STYLE,
)

PROGRAMS = ["bzcat", "xzcat"]

BRILLO_MAJOR_PAYLOAD_VERSION = 2


class PayloadError(Exception):
    pass


class Payload(object):
    class _PayloadHeader(object):
        _MAGIC = b"CrAU"

        def __init__(self):
            self.version = None
            self.manifest_len = None
            self.metadata_signature_len = None
            self.size = None

        def ReadFromPayload(self, payload_file):
            magic = payload_file.read(4)
            if magic != self._MAGIC:
                raise PayloadError("Invalid payload magic: %s" % magic)
            self.version = struct.unpack(">Q", payload_file.read(8))[0]
            self.manifest_len = struct.unpack(">Q", payload_file.read(8))[0]
            self.size = 20
            self.metadata_signature_len = 0
            if self.version != BRILLO_MAJOR_PAYLOAD_VERSION:
                raise PayloadError("Unsupported payload version (%d)" % self.version)
            self.size += 4
            self.metadata_signature_len = struct.unpack(">I", payload_file.read(4))[0]

    def __init__(self, payload_file):
        self.payload_file = payload_file
        self.header = None
        self.manifest = None
        self.data_offset = None
        self.metadata_signature = None
        self.metadata_size = None

    def _ReadManifest(self):
        return self.payload_file.read(self.header.manifest_len)

    def _ReadMetadataSignature(self):
        self.payload_file.seek(self.header.size + self.header.manifest_len)
        return self.payload_file.read(self.header.metadata_signature_len)

    def ReadDataBlob(self, offset, length):
        self.payload_file.seek(self.data_offset + offset)
        return self.payload_file.read(length)

    def Init(self):
        self.header = self._PayloadHeader()
        self.header.ReadFromPayload(self.payload_file)
        manifest_raw = self._ReadManifest()
        self.manifest = metadata_pb2.DeltaArchiveManifest()
        self.manifest.ParseFromString(manifest_raw)
        metadata_signature_raw = self._ReadMetadataSignature()
        if metadata_signature_raw:
            self.metadata_signature = metadata_pb2.Signatures()
            self.metadata_signature.ParseFromString(metadata_signature_raw)
        self.metadata_size = self.header.size + self.header.manifest_len
        self.data_offset = self.metadata_size + self.header.metadata_signature_len


def decompress_payload(command, data, size, hash):
    p = subprocess.Popen([command, "-"], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    r = p.communicate(data)[0]
    if len(r) != size:
        logging.warning("Unexpected size %d %d" % (len(r), size))
    elif hashlib.sha256(data).digest() != hash:
        logging.warning("Hash mismatch")
    return r


def parse_payload(payload_f, partition, out_f):
    BLOCK_SIZE = 4096
    for operation in partition.operations:
        e = operation.dst_extents[0]
        data = payload_f.ReadDataBlob(operation.data_offset, operation.data_length)
        out_f.seek(e.start_block * BLOCK_SIZE)
        if operation.type == metadata_pb2.InstallOperation.REPLACE:
            out_f.write(data)
        elif operation.type == metadata_pb2.InstallOperation.REPLACE_XZ:
            r = decompress_payload(
                "xzcat", data, e.num_blocks * BLOCK_SIZE, operation.data_sha256_hash
            )
            out_f.write(r)
        elif operation.type == metadata_pb2.InstallOperation.REPLACE_BZ:
            r = decompress_payload(
                "bzcat", data, e.num_blocks * BLOCK_SIZE, operation.data_sha256_hash
            )
            out_f.write(r)
        else:
            raise PayloadError("Unhandled operation type (%d)" % operation.type)

def purge(dir, pattern):
    """
    Delete files in specified dir by pattern
    Args:
        dir : directory to scan
        pattern : regex to match
    """
    for p in Path(dir).glob(pattern):
        logging.debug(f"Deleting - {p}")
        p.unlink()


def delete_old_files(dest_dir):
    logging.info("Deleting old files (if any)")
    dest_path = Path(dest_dir)
    shutil.rmtree(dest_path.joinpath("META-INF").absolute(), ignore_errors=True)
    shutil.rmtree(dest_path.joinpath("system").absolute(), ignore_errors=True)
    shutil.rmtree(dest_path.joinpath("system").absolute(), ignore_errors=True)
    purge(dir=dest_dir, pattern="system.*.*")
    purge(dir=dest_dir, pattern="*.img")
    purge(dir=dest_dir, pattern="*.bin")
    purge(dir=dest_dir, pattern="*.pb")


def main(filename, output_dir):
    try:
        delete_old_files(args.dest_dir)
        logging.info("Extracting 'payload.bin' from OTA file...")
        with zipfile.ZipFile(filename, "r") as zip_ref:
            zip_ref.extract("payload.bin", output_dir)

        logging.info("Extracting partitions from payload.bin")
        payload_file = Path(output_dir) / Path("payload.bin")
        with open(payload_file, 'rb') as payload_ref:
            payload = Payload(payload_ref)
            payload.Init()

            for p in payload.manifest.partitions:
                name = p.partition_name + ".img"
                logging.info("Extracting '%s'" % name)
                fname = os.path.join(output_dir, name)
                with open(fname, "wb") as out_f:
                    parse_payload(payload, p, out_f)
    except:
        logging.exception(f"Failed to extract payload - {filename}")
        sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        add_help=True,
    )
    parser.add_argument(
        "-d",
        "--dest-dir",
        default="build",
        required=True,
        type=str,
        help="Extract destination",
    )
    parser.add_argument(
        "-z", "--zip-file", required=True, type=str, help="Path to ZIP file"
    )
    args = parser.parse_args()
    main(filename=args.zip_file, output_dir=args.dest_dir)